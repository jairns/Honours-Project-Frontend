{"version":3,"sources":["Context/Auth/authContext.js","Routes/ProtectedRoute.js","Routes/ToAuthRoute.js","Context/Types.js","Context/Auth/authReducer.js","Utils/setAuthToken.js","Context/Auth/AuthState.js","Context/Decks/deckContext.js","Context/Decks/deckReducer.js","Context/Decks/DeckState.js","Context/Cards/cardContext.js","Context/Cards/cardReducer.js","Context/Cards/CardState.js","Layout/Navigation/NavItems.js","Layout/Navigation/Navigation.js","SharedComponents/Modal/Modal.js","Layout/Footer/FooterItems.js","Layout/Footer/Footer.js","SharedComponents/FormElements/Input.js","SharedComponents/FormElements/Button.js","Pages/Forms/RegisterForm.js","Pages/Forms/LoginForm.js","Components/CoverImage/CoverImage.js","Components/Section/Section.js","Images/target.svg","Images/solution.svg","Images/start.svg","Pages/Landing/Landing.js","Pages/Forms/AddDeck.js","SharedComponents/Spinner/Spinner.js","Pages/Forms/AddCard.js","SharedComponents/Card/Card.js","Images/flashcards.jpeg","Pages/Decks/Decks.js","SharedComponents/FormElements/FilePreview.js","Pages/Forms/EditDeck.js","Pages/ViewCards/ViewCards.js","Pages/Forms/EditCard.js","Pages/ReviseCards/ReviseCards.js","Pages/Forms/ForgotPassword.js","Pages/Forms/ResetPassword.js","Pages/Gdpr/Gdpr.js","App.js","index.js"],"names":["authContext","createContext","ProtectedRoute","Component","component","rest","useContext","AuthContext","isAuthenticated","loaded","render","props","to","ToAuthRoute","GET_DECKS","GET_DECK","ADD_DECK","DELETE_DECK","EDIT_DECK","UPDATE_DECK","CLEAR_DECKS","GET_CARDS","ADD_CARD","DELETE_CARD","EDIT_CARD","UPDATE_CARD","STUDY_CARDS","CLEAR_STUDYCARD","CLEAR_CARDS","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","DELETE_USER","CLEAR_RES","FORGOT_PASSWORD_RESPONSE","RESET_PASSWORD_RESPONSE","authReducer","state","action","type","user","payload","localStorage","setItem","token","removeItem","error","forgotPwdRes","resetPwdRes","setAuthToken","axios","defaults","headers","common","AuthState","initialState","getItem","useReducer","dispatch","loadUser","a","get","process","res","data","register","formData","config","post","response","msg","login","forgotPassword","email","put","resetPassword","deleteUser","id","delete","console","log","Provider","value","logout","clearRes","children","deckContext","deckReducer","decks","current","loading","map","deck","_id","filter","selectedDeck","DeckState","getDecks","getDeck","addDeck","updateDeck","deckData","deleteDeck","deleteThumbnail","editDeck","clearDecks","cardContext","cardReducer","studyCard","cards","selectedCard","card","CardState","getCards","reviseCards","addCard","updateCard","cardData","updateStatus","deleteCard","deleteFile","clearStudyCard","editCard","clearCards","NavItems","useState","isClick","setIsClicked","DeckContext","history","useHistory","className","Fragment","onClick","activeClassName","push","Navigation","Modal","forwardRef","ref","CardContext","React","useImperativeHandle","openModal","open","close","ReactDOM","createPortal","title","text","e","preventDefault","document","getElementById","FooterItems","modalRef","useRef","Footer","TextInput","placeholder","onFocus","focus","name","onChange","Button","class","style","width","click","RegisterForm","useEffect","initialValues","password","confirmPassword","validationSchema","Yup","shape","required","min","max","oneOf","onSubmit","values","setTimeout","handleChange","errors","touched","Input","pasconfirmPassword","LoginForm","CoverImage","heading","Section","src","img","alt","sectionText","Landing","Target","Method","Start","AddDeck","setType","setTitle","description","setDescription","file","setFile","titleValid","setTitleValid","desValid","setDesValid","fileValid","setFileValid","trim","FormData","append","target","files","test","Spinner","AddCard","question","setQuestion","setDeck","answerText","setAnswerText","sucMsg","setSucMsg","deckValid","setDeckValid","questionValid","setQuestionValid","AnswerTextValid","setAnswerTextValid","length","selectedOptions","opt","join","height","Card","maxWidth","windowSize","windowWidth","Placeholder","FilePreview","htmlFor","label","controls","EditDeck","match","params","setLoaded","filePrev","setFilePrev","inputHandler","includes","EditCard","setCard","getCard","isFlipped","setIsFlipped","onClickHandler","status","flipDirection","ForgotPassword","ResetPassword","expireParam","time","expiresIn","parseInt","resetId","currentTime","Date","now","Gdpr","App","path","exact","Decks","ViewCards","ReviseCards","StrictMode"],"mappings":"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","file":"static/js/main.f3c45866.chunk.js","sourcesContent":["// Creating authentication context\nimport { createContext } from 'react';\n\nconst authContext = createContext();\n\nexport default authContext;","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthContext from '../Context/Auth/authContext';\n\nconst ProtectedRoute = ({ component: Component, ...rest }) => {\n  const authContext = useContext(AuthContext);\n  const { isAuthenticated, loaded } = authContext;\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        !isAuthenticated && !loaded ? (\n          <Redirect to='/login' />\n        ) : (\n          <Component {...props} />\n        )\n      }\n    />\n  );\n};\n\nexport default ProtectedRoute;","import React, { useContext } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthContext from '../Context/Auth/authContext';\n\nconst ToAuthRoute = ({ component: Component, ...rest }) => {\n  const authContext = useContext(AuthContext);\n  const { isAuthenticated, loaded } = authContext;\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        !isAuthenticated && !loaded ? (\n            <Component {...props} />\n        ) : (\n          <Redirect to='/decks' />\n        )\n      }\n    />\n  );\n};\n\nexport default ToAuthRoute;","// Get all decks\nexport const GET_DECKS = 'GET_DECKS';\n// Get one deck\nexport const GET_DECK = 'GET_DECK';\n// Add a deck\nexport const ADD_DECK = 'ADD_DECK';\n// Delete a deck\nexport const DELETE_DECK = 'DELETE_DECK';\n// Populate contact form with current deck\nexport const EDIT_DECK = 'EDIT_DECK';\n// Update the deck\nexport const UPDATE_DECK = 'UPDATE_DECK';\n// Remove decks from state when user logs out\nexport const CLEAR_DECKS = 'CLEAR_DECKS';\n// Remove deck image\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n// Get all cards\nexport const GET_CARDS = 'GET_CARDS';\n// Add a card\nexport const ADD_CARD = 'ADD_CARD';\n// Delete a card\nexport const DELETE_CARD = 'DELETE_CARD';\n// Populate contact form with current card\nexport const EDIT_CARD = 'EDIT_CARD';\n// Update the card\nexport const UPDATE_CARD = 'UPDATE_CARD';\n// Revise cards\nexport const STUDY_CARDS = 'STUDY_CARDS';\n// Revise cards\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\n// Clear cards\nexport const CLEAR_STUDYCARD = 'CLEAR_STUDYCARD';\nexport const CLEAR_CARDS = 'CLEAR_CARDS';\n// Successful registration\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\n// Failed registration\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\n// Getting logged in user\nexport const USER_LOADED = 'USER_LOADED';\n// Authenitcation error\nexport const AUTH_ERROR = 'AUTH_ERROR';\n// Successful login\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\n// unsuccessful login\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\n// Logout\nexport const LOGOUT = 'LOGOUT';\nexport const DELETE_USER = 'DELETE_USER';\nexport const CLEAR_RES = 'CLEAR_RES';\nexport const FORGOT_PASSWORD_RESPONSE = 'FORGOT_PASSWORD_RESPONSE';\nexport const RESET_PASSWORD_RESPONSE = 'RESET_PASSWORD_RESPONSE';\n","import {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    DELETE_USER,\n    FORGOT_PASSWORD_RESPONSE,\n    RESET_PASSWORD_RESPONSE,\n    CLEAR_RES\n} from '../Types';\n\nconst authReducer = (state, action) => {\n    switch(action.type) {\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                loaded: true,\n                // Set the user equal to the user sent from the payload\n                user: action.payload\n            };\n        case REGISTER_SUCCESS:\n        case LOGIN_SUCCESS:\n            // Setting the token sent within the payload as local storage \n            localStorage.setItem('token', action.payload.token)\n            return {\n                // Spreading the current state\n                ...state,\n                // Storing token in state\n                ...action.payload,\n                // Setting isAuthenticated state to true\n                isAuthenticated: true,\n                loaded: true\n            };\n        case REGISTER_FAIL:\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT:\n        case DELETE_USER:\n            // Removing token from local storage\n            localStorage.removeItem('token')\n            return {\n                // Current state\n                ...state,\n                // Reset token\n                token: null,\n                // Set authenticated to false\n                isAuthenticated: false,\n                loaded: false,\n                // No user\n                user: null,\n                // Getting the error message sent if the registration fails\n                error: action.payload\n            };\n        case CLEAR_RES:\n           return {\n               ...state,\n               error: null,\n               forgotPwdRes: null,\n               loaded: false\n           };\n        case FORGOT_PASSWORD_RESPONSE: \n           return {\n               ...state,\n               forgotPwdRes: action.payload\n           };\n        case RESET_PASSWORD_RESPONSE:\n           return {\n               ...state,\n               resetPwdRes: action.payload\n           }\n        default: \n            return state;\n    }\n}\n\nexport default authReducer;","import axios from 'axios';\n\nconst setAuthToken = token => {\n    // If a token exists\n    if(token) {\n        // Set it as a default header; thus always sending it when making requests if the user is authenticated\n        axios.defaults.headers.common['x-auth-token'] = token;\n    } else {\n        // If theres not a token passed, delete the header\n       delete axios.defaults.headers.common['x-auth-token'];\n    }\n}\n\nexport default setAuthToken;","import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport AuthContext from './authContext';\nimport authReducer from './authReducer';\nimport setAuthToken from '../../Utils/setAuthToken';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    DELETE_USER,\n    FORGOT_PASSWORD_RESPONSE, \n    RESET_PASSWORD_RESPONSE,\n    CLEAR_RES\n} from '../Types';\n\nconst AuthState = props => {\n    // Initial authentication state\n    const initialState = {\n        // JWT\n        token: localStorage.getItem('token'),\n        // If the user is authenticated\n        isAuthenticated: null,\n        // If the page is done loading\n        loaded: true,\n        // The current logged in user\n        user: null,\n        // Authentication errors and success messages\n        error: null,\n        forgotPwdRes: null,\n        resetPwdRes: null\n    };\n\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    // Load User\n    const loadUser = async () => {\n        // if a token exists in local storage\n        if(localStorage.token) {\n            setAuthToken(localStorage.token);\n        }\n        try {\n            const res = await axios.get(process.env.REACT_APP_API_URL + 'auth');\n            dispatch({ \n                // Dispatch the user to the reducer\n                type: USER_LOADED, \n                payload: res.data \n            });\n        } catch (err) {\n            // If there is an error\n            dispatch({ type: AUTH_ERROR });\n        }\n    }\n\n    // Register User\n    const register = async formData => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            const res = await axios.post(process.env.REACT_APP_API_URL + 'users', formData, config);\n            dispatch({ \n                type: REGISTER_SUCCESS,\n                // Payload will be equal to token\n                payload: res.data\n             })\n             loadUser();\n        } catch (err) {\n            dispatch({ \n                type: REGISTER_FAIL,\n                // Setting payload to error message\n                payload: err.response.data.msg\n             })\n        }\n    }\n\n    // Login User\n    const login = async formData => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            const res = await axios.post(process.env.REACT_APP_API_URL + 'auth', formData, config);\n            dispatch({ \n                type: LOGIN_SUCCESS,\n                // Payload will be equal to token\n                payload: res.data\n             })\n             loadUser();\n        } catch (err) {\n            dispatch({ \n                type: LOGIN_FAIL,\n                // Setting payload to error message\n                payload: err.response.data.msg\n             })\n        }\n    }\n\n    // Logout \n    const logout = () => {\n        dispatch({ type: LOGOUT });\n    \n    }\n    // Forgot Password\n    const forgotPassword = async email => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n           const res = await axios.put(process.env.REACT_APP_API_URL + 'auth/forgot', email, config);\n            dispatch({ \n                type: FORGOT_PASSWORD_RESPONSE,\n                // Setting payload to error message\n                payload: res.data.msg\n             })\n        } catch (err) {\n            dispatch({ \n                type: FORGOT_PASSWORD_RESPONSE,\n                // Setting payload to error message\n                payload: err.response.data.msg\n             })\n        }\n    }\n\n    // Forgot Password\n    const resetPassword = async formData => {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        try {\n            const res = await axios.put(process.env.REACT_APP_API_URL + 'auth/reset/password', formData, config);\n            dispatch({ \n                type: RESET_PASSWORD_RESPONSE,\n                // Setting payload to error message\n                payload: res.data.msg\n             })\n        } catch (err) {\n            dispatch({ \n                type: RESET_PASSWORD_RESPONSE,\n                // Setting payload to error message\n                payload: err.response.data.msg\n             })\n        }\n    }\n    // Delete User\n    const deleteUser = async id => {\n        try {\n            await axios.delete(process.env.REACT_APP_API_URL + `users/${id}`);\n            // Dispatching the function and the payload to the reducer\n            dispatch({ \n                type: DELETE_USER, \n                payload: id\n            });\n        } catch (err) {\n            console.log(err.response.data.msg)\n        }\n    }\n\n    // Clear repsonse errors\n    const clearRes = () => {\n        dispatch({ type: CLEAR_RES })\n    }\n\n    // Passing state and functions to context\n    return (\n        <AuthContext.Provider value={{\n            token: state.token,\n            isAuthenticated: state.isAuthenticated,\n            loaded: state.loaded,\n            user: state.user,\n            error: state.error,\n            forgotPwdRes: state.forgotPwdRes,\n            resetPwdRes: state.resetPwdRes,\n            register,\n            loadUser,\n            login,\n            logout,\n            forgotPassword,\n            resetPassword,\n            deleteUser,\n            clearRes\n        }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n};\n\nexport default AuthState;","// Creating deck context\nimport { createContext } from 'react';\n\nconst deckContext = createContext();\n\nexport default deckContext;","import {\n    GET_DECKS,\n    GET_DECK,\n    ADD_DECK,\n    DELETE_DECK,\n    EDIT_DECK,\n    UPDATE_DECK,\n    CLEAR_DECKS\n} from '../Types';\n\nconst deckReducer = (state, action) => {\n    switch(action.type) {\n        // Setting decks associated with a user\n        case GET_DECKS:\n            return {\n                ...state,\n                decks: action.payload,\n                loaded: true\n            }\n        // Setting a specific deck\n        case GET_DECK:\n            return {\n                ...state,\n                current: action.payload,\n                loaded: true\n            }\n        // Adding a new deck to state\n        case ADD_DECK: \n            return {\n                ...state,\n                // Updating the state with the data sent from payload\n                decks: [action.payload, ...state.decks],\n                loading: false\n            }\n        // Setting the selected deck to ensure the values are accessible\n        case EDIT_DECK: \n            return {\n                // Current state\n                ...state,\n                // Set current to the contact\n                current: action.payload\n            }\n        // Updating a deck\n        case UPDATE_DECK:\n            return {\n                // Current state\n                ...state,\n                // Map through the contact to identify the contact which is being updated, replace it with the new value\n                decks: state.decks.map(deck => \n                    deck._id === action.payload._id ? \n                action.payload : deck),\n                loading: false\n            }\n        // Deleting deck from state\n        case DELETE_DECK:\n            return {\n                // Current state\n                ...state,\n                // Retrieving all the contacts except the one with the ID specified withing the payload\n                decks: state.decks.filter(deck => deck._id !== action.payload),\n                loading: false\n            }\n        // Clearing decks from state\n        case CLEAR_DECKS:\n            return {\n                ...state,\n                decks: null,\n                error: null,\n                selectedDeck: null\n            }\n        default: \n            return state;\n    }\n }\n\n export default deckReducer;","import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport DeckContext from './deckContext';\nimport deckReducer from './deckReducer';\nimport {\n    GET_DECKS,\n    GET_DECK,\n    ADD_DECK,\n    DELETE_DECK,\n    EDIT_DECK,\n    UPDATE_DECK,\n    CLEAR_DECKS\n} from '../Types';\n\nconst DeckState = props => {\n    const initialState = {\n        decks: null,\n        // When editing a deck, this will be updated to the decks values\n        current: null,\n        // Error\n        error: null,\n        loaded: false\n    };\n\n    const [state, dispatch] = useReducer(deckReducer, initialState);\n\n    // Get decks\n    const getDecks = async () => {\n        try {\n            const res = await axios.get(process.env.REACT_APP_API_URL + 'decks');\n            // Dispatching the function and the payload to the reducer\n            dispatch({ \n                type: GET_DECKS, \n                // Response should be equal to all the users decks, which are sent in the payload\n                payload: res.data \n            });\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n\n    // Get deck\n    const getDeck = async id => {\n        try {\n            const res = await axios.get(process.env.REACT_APP_API_URL + `decks/${id}`);\n            // Dispatching the function and the payload to the reducer\n            dispatch({ \n                type: GET_DECK, \n                // Response should be equal to all the users decksw, which are sent in the payload\n                payload: res.data \n            });\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n\n    // Add deck\n    const addDeck = async deck => {\n        try {\n            const res = await axios.post(process.env.REACT_APP_API_URL + 'decks', deck);\n            // Dispatching the function and the payload to the reducer\n            dispatch({ \n                type: ADD_DECK, \n                payload: res.data \n            });\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n    // Edit deck\n    const editDeck = deck => {\n        // Dispatching the function and the payload to the reducer\n        dispatch({ type: EDIT_DECK, payload: deck });\n    }\n    // Update deck\n    const updateDeck = async (id, deckData) => {\n        try {\n            const res = await axios.put(process.env.REACT_APP_API_URL + `decks/${id}`, deckData);\n            // Dispatching the function and the payload to the reducer\n            dispatch({ \n                type: UPDATE_DECK, \n                payload: res.data\n            });\n            // console.log(id, deckData)\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n    // Delete deck\n    const deleteDeck = async id => {\n        try {\n            await axios.delete(process.env.REACT_APP_API_URL + `decks/${id}`);\n            // Dispatching the function and the payload to the reducer\n            dispatch({ \n                type: DELETE_DECK, \n                payload: id\n            });\n            } catch (err) {\n                console.log(err.response)\n            }\n    }\n    // Delete thumbnail\n    const deleteThumbnail = async id => {\n        try {\n           const res = await axios.put(process.env.REACT_APP_API_URL + `decks/delete/thumbnail/${id}`);\n            dispatch({ \n                type: UPDATE_DECK, \n                payload: res.data\n            });\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n\n    // Clear decks\n    const clearDecks = () => {\n        // Dispatching the function and the payload to the reducer\n        dispatch({ type: CLEAR_DECKS });\n    }\n\n    return (\n        <DeckContext.Provider value={{\n            decks: state.decks,\n            current: state.current,\n            error: state.error,\n            getDecks,\n            getDeck,\n            addDeck,\n            editDeck,\n            updateDeck,\n            deleteDeck,\n            deleteThumbnail,\n            clearDecks\n        }}>\n            {props.children}\n        </DeckContext.Provider>\n    );\n};\n\nexport default DeckState;","// Creating card context\nimport { createContext } from 'react';\n\nconst cardContext = createContext();\n\nexport default cardContext;","import {\n    GET_CARDS,\n    STUDY_CARDS,\n    ADD_CARD,\n    EDIT_CARD,\n    UPDATE_CARD,\n    DELETE_CARD,\n    CLEAR_STUDYCARD,\n    CLEAR_CARDS\n} from '../Types';\n\nconst cardReducer = (state, action) => {\n    switch(action.type) {\n        // Clearing study card state\n        case CLEAR_STUDYCARD:\n            return {\n                ...state,\n                studyCard: null\n            };\n        // Getting the cards associated with a deck    \n        case GET_CARDS:\n            return {\n                ...state,\n                cards: action.payload,\n                loaded: true\n            };\n        // Setting study card state\n        case STUDY_CARDS:\n            return {\n                ...state,\n                studyCard: action.payload,\n                loaded: true\n            };\n        // Adding new card to state\n        case ADD_CARD: \n            return {\n                // Current state\n                ...state,\n                // Updating the state with the data sent from payload\n                cards: [action.payload, ...state.cards],\n                loading: false\n            };\n        // Setting the selected card to ensure the values are accessible\n        case EDIT_CARD: \n            return {\n                // Current state\n                ...state,\n                // Set current to the contact\n                selectedCard: action.payload\n            };\n        // Clearing the cards\n        case CLEAR_CARDS:\n            return {\n                ...state,\n                cards: [],\n                loaded: false\n            };\n        // Updating a card\n        case UPDATE_CARD:\n            return {\n                // Current state\n                ...state,\n                // Map through the contact to identify the contact which is being updated, replace it with the new value\n                cards: state.cards.map(card => \n                    card._id === action.payload._id ? \n                action.payload : card),\n                loading: false\n            };\n        // Deleting a card\n        case DELETE_CARD:\n            return {\n                // Current state\n                ...state,\n                // Retrieving all the cards except the one with the ID specified within the payload\n                cards: state.cards.filter(card => card._id !== action.payload),\n                loading: false\n            };\n        default: \n            return state;\n    }\n }\n\n export default cardReducer;","import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport CardContext from './cardContext';\nimport cardReducer from './cardReducer';\nimport {\n    GET_CARDS,\n    STUDY_CARDS,\n    ADD_CARD,\n    EDIT_CARD,\n    UPDATE_CARD,\n    DELETE_CARD,\n    CLEAR_CARDS,\n    CLEAR_STUDYCARD\n} from '../Types';\n\nconst CardState = props => {\n    const initialState = {\n        cards: [],\n        selectedCard: null,\n        studyCard: null,\n        error: null,\n        loaded: false\n    };\n\n    const [state, dispatch] = useReducer(cardReducer, initialState);\n\n    // Get cards\n    const getCards = async id => {\n        try {\n            const res = await axios.get(process.env.REACT_APP_API_URL + `cards/${id}`);\n            // Dispatching the function and the payload to the reducer\n            dispatch({ \n                type: GET_CARDS, \n                // Response should be equal to all the users decks, which are sent in the payload\n                payload: res.data \n            });\n        } catch (err) {\n            // Log error message if exists\n            console.log(err.response)\n        }\n    }\n\n    // Clearing the study card state\n    const clearStudyCard = () => {\n        dispatch({ type: CLEAR_STUDYCARD })\n    }\n\n    // Getting a study card\n    const reviseCards = async id => {\n        try {\n            const res = await axios.get(process.env.REACT_APP_API_URL + `cards/revise/${id}`);\n            dispatch({ \n                type: STUDY_CARDS, \n                payload: res.data \n            });\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n\n     // Adding a card\n     const addCard = async card => {\n        try {\n            const res = await axios.post(process.env.REACT_APP_API_URL + 'cards', card);\n            dispatch({ \n                type: ADD_CARD, \n                payload: res.data \n            });\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n\n    // Edit Card\n    const editCard = card => {\n        dispatch({ type: EDIT_CARD, payload: card });\n    }\n\n    // Update Card\n    const updateCard = async (id, cardData) => {\n        try {\n            const res = await axios.put(process.env.REACT_APP_API_URL + `cards/${id}`, cardData);\n            dispatch({ \n                type: UPDATE_CARD, \n                payload: res.data\n            });\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n\n    // Updating cards status\n    const updateStatus = async (cardData) => {\n        try {\n            await axios.put(process.env.REACT_APP_API_URL + `cards/${cardData._id}`, cardData);\n        } catch (err) {\n            console.log(err.response)\n        }\n    }\n\n    // Deleting a card\n    const deleteCard = async id => {\n        try {\n            await axios.delete(process.env.REACT_APP_API_URL + `cards/${id}`);\n            // Dispatching the function and the payload to the reducer\n            dispatch({ \n                type: DELETE_CARD, \n                payload: id\n            });\n        } catch (err) {\n            console.log(err.response.data.msg)\n        }\n    }\n\n    // Delete a file\n    const deleteFile = async id => {\n        try {\n            const res = await axios.put(process.env.REACT_APP_API_URL + `cards/delete/file/${id}`);\n            dispatch({ \n                type: UPDATE_CARD, \n                payload: res.data\n            });\n            } catch (err) {\n                console.log(err.response)\n            }\n        }\n\n    // Clearing the cards state\n    const clearCards = () => {\n        dispatch({ type: CLEAR_CARDS })\n    }\n\n    return (\n        // Exports - applied to context, providing access to the state and functions throughout the entire application\n        <CardContext.Provider value={{\n            cards: state.cards,\n            studyCard: state.studyCard,\n            selectedCard: state.selectedCard,\n            error: state.error,\n            loaded: state.loaded,\n            getCards,\n            clearStudyCard,\n            reviseCards,\n            addCard,\n            editCard,\n            updateCard,\n            updateStatus,\n            deleteFile,\n            deleteCard,\n            clearCards\n        }}>\n            {props.children}\n        </CardContext.Provider>\n    );\n};\n\nexport default CardState;","import React , { useState, useContext } from 'react';\n// import { Link } from 'react-router-dom';\nimport { NavLink as Link, useHistory } from 'react-router-dom';\nimport './Navigation.css'\nimport AuthContext from '../../Context/Auth/authContext';\nimport DeckContext from '../../Context/Decks/deckContext';\n\nconst NavItems = () => {\n    const [isClick, setIsClicked] = useState(false);\n\n    const authContext = useContext(AuthContext);\n    const deckContext = useContext(DeckContext);\n    const { logout, isAuthenticated } = authContext;\n    const { clearDecks } = deckContext;\n\n    const history = useHistory();\n\n    const onLogoutHandler = () => {\n        // Calling the logout function from state, which dispatches to reducer \n        logout();\n        // Clearing contacts after logout\n        clearDecks();\n\n        history.push('/login');\n    \n    }\n    return(\n        <div className='navItems'>\n            <h1 className='logo'>OMNILINGU</h1>\n            <ul className={!isClick ? 'hide' : 'show'}>\n                {isAuthenticated ? (\n                    <React.Fragment>\n                        <li><Link to='/decks' onClick={() => setIsClicked(!isClick)} activeClassName='active'>MY DECKS</Link></li> \n                        <li><Link to='/adddeck' onClick={() => setIsClicked(!isClick)} activeClassName='active'>ADD DECK</Link></li> \n                        <li><Link to='/addcard' onClick={() => setIsClicked(!isClick)} activeClassName='active'>ADD CARD</Link></li> \n                        <li onClick={onLogoutHandler}>LOGOUT</li> \n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>                        \n                        <li><Link to='/home' activeClassName='active'>HOME</Link></li>\n                        <li><Link to='/login' activeClassName='active'>LOGIN</Link></li>\n                        <li><Link to='/register' activeClassName='active'>REGISTER</Link></li>\n                    </React.Fragment>\n                )}\n            </ul>\n            <i className={!isClick ? 'fa fa-bars' : 'fa fa-times'} onClick={() => setIsClicked(!isClick)}></i>\n        </div>\n    )\n}\n\nexport default NavItems;\n\n// http://reactcommunity.org/react-transition-group/","import React from 'react';\nimport NavItems from './NavItems';\nimport './Navigation.css';\n\nconst Navigation = () => {\n    return(\n        <nav>\n            <NavItems />\n        </nav>\n    )\n}\n\nexport default Navigation;","import React, { useState, forwardRef, useContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useHistory } from 'react-router-dom';\nimport AuthContext from '../../Context/Auth/authContext';\nimport DeckContext from '../../Context/Decks/deckContext';\nimport CardContext from '../../Context/Cards/cardContext';\nimport './Modal.css';\n\nconst Modal = forwardRef((props, ref) => {\n\n    // Modal open state\n    const [isClick, setIsClicked] = useState(false);\n\n    const authContext = useContext(AuthContext);\n    const deckContext = useContext(DeckContext);\n    const cardContext = useContext(CardContext);\n\n    // Extracting the contacts & the filtered state within the context\n    const { user, deleteUser } = authContext;\n    const { current, deleteDeck } = deckContext;\n    const { selectedCard, deleteCard } = cardContext;\n\n    const history = useHistory();\n\n    React.useImperativeHandle(ref, () => {\n        return {\n          openModal: () => open(),\n          close: () => close()\n        }\n      });\n\n    const open = () => {\n        setIsClicked(true);\n    }\n\n    const close = () => {\n        setIsClicked(false);\n    }\n\n    const onDeleteHandler = e => {\n        // Preventing form submission\n        e.preventDefault();\n        // Deck deletion\n        if(props.title === 'Deck') {\n            // Getting deck id from currents state\n            let id = current._id;\n            // Passing deck id to the delete deck function\n            deleteDeck(id)\n            // Closing the modal\n            setIsClicked(false);\n            // Card deletion\n        } else if(props.title === 'Card') {\n            let id = selectedCard._id;\n            deleteCard(id)\n            setIsClicked(false);\n            // Account deletion\n        } else {\n            deleteUser(user._id)\n            setIsClicked(false);\n            // Redirect to login page\n            history.push('/login');\n        }\n    }\n\n    // If isClick is true, open modal\n    if(isClick){\n        return ReactDOM.createPortal(\n            <div className='modal-wrapper'>\n                <div className=\"modal-content\">\n                    <div className=\"modal-body\">\n                        <h4>Delete {props.title}<i className=\"fa fa-trash pl-5\"></i></h4>\n                        <p>Are you sure you want to delete {props.text}?</p>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <p onClick={() => setIsClicked(!isClick)}>CANCEL</p>\n                        <form>\n                            <button onClick={onDeleteHandler} className='modal-btn' type=\"submit\">DELETE</button>\n                        </form>\n                    </div>\n                </div>\n            </div>, document.getElementById(\"modal-root\")\n            // ^^ Modal location on page\n         );   \n    } else {\n        return null;\n    }\n});\n\nexport default Modal;","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport Modal from '../../SharedComponents/Modal/Modal';\nimport AuthContext from '../../Context/Auth/authContext';\nimport './Footer.css';\n\nconst FooterItems = () => {\n\n    // Delete account modal\n    const modalRef = React.useRef();\n\n    // Open modal\n    const openModal = () => {\n        modalRef.current.openModal()\n    };\n\n    // Importing auth context\n    const authContext = useContext(AuthContext);\n    // Extracting isAuthentication from authContext\n    const { isAuthenticated } = authContext;\n\n    return (\n        <footer>\n            <Modal ref={modalRef} title={'Account'} text={'account'}/>\n            <div className='footerItems'>\n                {/*If the user is authenticated, display delete account */}\n                {isAuthenticated ? (\n                    <p onClick={openModal} className='footerText'>Delete Account</p>\n                ) : (\n                    null\n                )\n                }\n                <Link to='/gdpr'><p className='footerText'>Data Protection Policy</p></Link>\n            </div>\n        </footer>\n    )\n}\n\nexport default FooterItems;","import React from 'react';\nimport FooterItems from './FooterItems';\nimport './Footer.css';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <FooterItems />\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport './FormElements.css';\n\nconst TextInput = (props) => {\n\n    return (\n        <input \n            type={props.type} \n            placeholder={props.placeholder} \n            onFocus={props.focus} \n            name={props.name} \n            onChange={props.onChange}\n            value={props.value} />\n    );\n}\n\nexport default TextInput;","import React from 'react';\nimport './FormElements.css';\n\nconst Button = (props) => {\n    return (\n        <button\n            type={props.type} \n            className={props.class} \n            style={{ width: `${props.width}` }}\n            name={props.name}\n            onClick={props.click}>\n                {props.value}\n        </button>\n    );\n}\n\nexport default Button;","import React, { useContext, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport AuthContext from '../../Context/Auth/authContext';\nimport Input from '../../SharedComponents/FormElements/Input';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport '../../SharedComponents/FormElements/FormElements.css';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nconst RegisterForm = () => {\n    // Initialise auth context\n    const authContext = useContext(AuthContext)\n    // Retrieving the set regitser function from the auth context\n    const { register, isAuthenticated, clearRes } = authContext;\n\n    const history = useHistory();\n\n\n    useEffect(() => {\n\n        clearRes()\n\n        // eslint-disable-next-line\n        // ABOVE LINE  DISCUSS THIS AS AN ERROR IN HONOURS PROJECT\n    // Including clearRes as a dependecy array was creating an infinite error  \n    }, [isAuthenticated, history]);\n    // Including clearRes as a dependecy array was creating an infinite error \n\n    const errorChck = () => {\n       // Set back to false after five seconds\n        setTimeout(() => {\n            clearRes();\n        }, 5000);\n    }\n\n    return (\n        <div className='margins'>\n            <h1 className='formHeading pt-110'>Register</h1>\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                    confirmPassword: ''\n                }}\n                validationSchema={\n                    Yup.object().shape({\n                        email: Yup.string()\n                            .email('Email is invalid')\n                            .required('Email is required'),\n                        password: Yup.string()\n                            .min(6)\n                            .max(15)\n                            .required('Password is required'),\n                        confirmPassword: Yup.string()\n                            .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                            .required('You must confirm your password'),\n                    })\n                }\n                onSubmit={ (values) => {\n                    const { email, password } = values;\n                    register({\n                        email,\n                        password\n                    })\n                    errorChck();\n                    // If the user is authenticated, redirect to the home page\n                    if(isAuthenticated) {\n                        history.push('/decks');\n                    }\n                }}>\n                {({  handleChange, values, errors, touched }) => (        \n                    <Form>\n                        <Input \n                            type='text' \n                            placeholder='ENTER EMAIL' \n                            name='email' \n                            onChange={handleChange}\n                            values={values.email} />\n                        <p className='errorMsg red'>{errors.email && touched.email ? errors.email : null}</p>\n\n                        <Input\n                            type='password' \n                            placeholder='ENTER PASSWORD' \n                            name='password'\n                            onChange={handleChange}\n                            values={values.password} />\n                        <p className='errorMsg red'>{errors.password && touched.password ? errors.password : null}</p>\n\n                        <Input\n                            type='password' \n                            placeholder='CONFIRM PASSWORD' \n                            name='confirmPassword'\n                            onChange={handleChange}\n                            values={values.pasconfirmPassword} />\n                        <p className='errorMsg red'>{errors.confirmPassword && touched.confirmPassword ? errors.confirmPassword : null}</p>\n                        \n                        <Button type='submit' class={'green mt-50'} value='REGISTER' width='100%' />\n                        {authContext.error !== null && (\n                            <p className='errorMsg red errorMsg red d-block w-100'>{authContext.error}</p>    \n                        )}\n                        <Link to='/login' className='link underline'>Login here</Link>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n\nexport default RegisterForm;","import React, { useContext, useEffect } from 'react';\nimport AuthContext from '../../Context/Auth/authContext';\nimport Input from '../../SharedComponents/FormElements/Input';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport '../../SharedComponents/FormElements/FormElements.css';\nimport { Link } from 'react-router-dom';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nconst LoginForm = (props) => {\n    // Initialise auth context\n    const authContext = useContext(AuthContext)\n    // Retrieving the set regitser function from the auth context\n    const { login, isAuthenticated, clearRes } = authContext;\n\n    useEffect(() => {\n        // If the user is authenticated, redirect to the home page\n        // if(isAuthenticated) {\n        //     props.history.push('/decks');\n        // }\n\n        clearRes()\n\n        // eslint-disable-next-line\n        // ABOVE LINE  DISCUSS THIS AS AN ERROR IN HONOURS PROJECT\n    // Including clearRes as a dependecy array was creating an infinite error  \n    }, [isAuthenticated, props.history]);\n    // }, []);\n\n    const errorChck = () => {\n       // Set back to false after five seconds\n        setTimeout(() => {\n            clearRes();\n        }, 5000);\n    }\n\n    return (\n        <div className='margins'>\n            <h1 className='formHeading pt-110'>Login</h1>\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: ''\n                }}\n                validationSchema={\n                    Yup.object().shape({\n                        email: Yup.string()\n                            .email('Email is invalid')\n                            .required('Email is required'),\n                        password: Yup.string()\n                            .min(6)\n                            .max(15)\n                            .required('Password is required'),\n                    })\n                }\n                onSubmit={ (values) => {\n                    const { email, password } = values;\n                    login({\n                        email,\n                        password\n                    })\n                    errorChck();\n                }}>\n                {({  handleChange, values, errors, touched }) => (        \n                    <Form>\n                        <Input \n                            type='text' \n                            placeholder='ENTER EMAIL' \n                            name='email' \n                            onChange={handleChange}\n                            values={values.email} />\n                        <p className='errorMsg red'>{errors.email && touched.email ? errors.email : null}</p>\n\n                        <Input\n                            type='password' \n                            placeholder='ENTER PASSWORD' \n                            name='password'\n                            onChange={handleChange}\n                            values={values.password} />\n                        <p className='errorMsg red'>{errors.password && touched.password ? errors.password : null}</p>\n                        \n                        <Button type='submit' class={'green mt-50'} value='LOGIN' width='100%' />\n                        {authContext.error !== null && (\n                            <p className='errorMsg red d-block w-100'>{authContext.error}</p>    \n                        )}\n\n                        <Link to='/forgot' className='link underline'>Forgot your password?</Link>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n\nexport default LoginForm;","import React from 'react';\nimport './CoverImage.css';\n\nconst CoverImage = (props) => {\n    return (\n        <div className='coverImage'>\n            <div className='margins vertical'>\n                <h1 className='formHeading'>{props.heading}</h1>\n                <p>{props.text}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default CoverImage;","import React from 'react';\nimport './Section.css';\n\nconst Section = (props) => {\n    return (\n        <section>\n            <div className='margins'>\n                <img src={props.img} alt={props.heading} className='icons' />\n                <h1 className='formHeading'>{props.heading}</h1>\n                <p>{props.sectionText}</p>\n            </div>\n        </section>\n    )\n}\n\nexport default Section;","export default __webpack_public_path__ + \"static/media/target.c3779b37.svg\";","export default __webpack_public_path__ + \"static/media/solution.a5ed9e28.svg\";","export default __webpack_public_path__ + \"static/media/start.9617e97e.svg\";","import React from 'react';\nimport CoverImage from '../../Components/CoverImage/CoverImage';\nimport Section from '../../Components/Section/Section';\nimport Target from '../../Images/target.svg';\nimport Method from '../../Images/solution.svg';\nimport Start from '../../Images/start.svg';\n\nconst Landing = () => {\n    return (\n        <div>\n            <CoverImage \n                heading={'Welcome to omnilingu'}\n                text={'An online learning environment which allows users to create flashcards.'} />\n            <Section \n                img={Target} \n                alt={'Our Aim'} \n                heading={'Our Aim'} \n                sectionText={'To provide an accessible learning enviornment where language learners can advance their language skills by using a certified learning method.'} />\n            <Section \n                img={Method} \n                alt={'Our Method'} \n                heading={'Our Method'} \n                sectionText={'We use spaced repeition, partnered with flashcards. This means, you decide determine the time between repetitions, the harder the question, the shorter the repetition.'} />\n            <Section \n                img={Start} \n                alt={'Get Started'} \n                heading={'Get Started'} \n                sectionText={'To get started login or register with us, its free!'} />    \n        </div>        \n    );\n}\n\nexport default Landing;","import React, { useState, useEffect, useContext } from 'react';\nimport Input from '../../SharedComponents/FormElements/Input';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport '../../SharedComponents/FormElements/FormElements.css';\nimport AuthContext from '../../Context/Auth/authContext';\nimport DeckContext from '../../Context/Decks/deckContext';\n\nconst AddDeck = (props) => {\n\n    const authContext = useContext(AuthContext)\n\n    const deckContext = useContext(DeckContext);\n\n    // Extracting the contacts & the filtered state within the context\n    const { addDeck } = deckContext;\n\n    // When the page renders\n    useEffect(() => {\n        // Call the load user function\n        authContext.loadUser();\n        //eslint-disable-next-line\n    }, [])\n\n    const [type, setType] = useState('text');\n    const [title, setTitle] = useState('');\n    const [description, setDescription] = useState('');\n    const [file, setFile] = useState('');\n\n    // Validators\n    const [titleValid, setTitleValid] = useState(true);\n    const [desValid, setDesValid] = useState(true);\n    const [fileValid, setFileValid] = useState(true);\n\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        if(title.trim() === '') {\n            setTitleValid(false);\n        } else {\n            setTitleValid(true);\n        }\n        if(description.trim() === '') {\n            setDesValid(false);\n        } else {\n            setDesValid(true);\n        }\n        if(titleValid && title.trim() !== '' && desValid && description.trim() !== '' && fileValid) {\n            let deck = new FormData();\n            deck.append('title', title)\n            deck.append('description', description)\n            deck.append('file', file)\n        \n            addDeck(deck)\n\n            props.history.push('/decks');\n        }\n    } \n\n    return (\n        <div className='margins'>\n            <form onSubmit={onSubmitHandler}>\n                <h1 className='formHeading pt-110'>Add Deck</h1>\n                <Input \n                    type='text' \n                    placeholder='ENTER DECK TITLE'                     \n                    name='title' \n                    onChange={e => {\n                        setTitle(e.target.value)\n                        setTitleValid(true);\n                    }}\n                    value={title} />\n\n                    {!titleValid && \n                        <p className='errorMsg red'>Title is required</p>\n                    }\n                        \n                    <Input \n                        type='text' \n                        placeholder='ENTER DECK DESCRIPTION'                     \n                        name='description' \n                        onChange={e =>  {\n                            setDescription(e.target.value)\n                            setDesValid(true)\n                        }}\n                        value={description} />\n\n                    {!desValid && \n                        <p className='errorMsg red'>Description is required</p>\n                    }\n\n                    <Input \n                        type={type} \n                        placeholder='UPLOAD DECK THUMBNAIL' \n                        name='file'\n                        focus={() => setType('file')}\n                        onChange={e => {setFile(e.target.files[0])\n                            if((/\\.(jpe?g|png)$/i).test(e.target.value)) {\n                                setFileValid(true)\n                            } else {\n                                setFileValid(false)\n                            }\n                        }} />\n    \n                        {!fileValid && \n                            <p className='errorMsg red'>File is invalid. Please upload jpeg, jpg or png</p>\n                        }\n                            \n                    <Button type='submit' class={'green mt-50'} value='ADD DECK' width='100%' />\n                </form>\n        </div>\n    )\n}\n\nexport default AddDeck;","import React from 'react';\nimport './Spinner.css';\nimport { BeatLoader } from 'react-spinners';\n\nconst Spinner = () => {\n    return(\n        <div className='spinnerContainer'>\n            <BeatLoader loading />\n        </div>\n    )\n}\n\nexport default Spinner;","import React, { useState, useEffect, useContext } from 'react';\nimport Input from '../../SharedComponents/FormElements/Input';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport '../../SharedComponents/FormElements/FormElements.css';\nimport AuthContext from '../../Context/Auth/authContext';\nimport DeckContext from '../../Context/Decks/deckContext';\nimport CardContext from '../../Context/Cards/cardContext';\nimport Spinner from '../../SharedComponents/Spinner/Spinner';\n\nconst AddCard = () => {\n\n    const authContext = useContext(AuthContext)\n    const deckContext = useContext(DeckContext)\n    const cardContext = useContext(CardContext)\n\n    const { getDecks, decks, loaded } = deckContext;\n    const { addCard } = cardContext;\n\n    // When the page renders\n    useEffect(() => {\n        // Call the load user function\n        authContext.loadUser();\n        getDecks();\n        //eslint-disable-next-line\n    }, [])\n\n    // Values\n    const [question, setQuestion] = useState('');\n    const [deck, setDeck] = useState('');\n    const [answerText, setAnswerText] = useState('');\n    const [file, setFile] = useState();\n    const [type, setType] = useState('text');\n\n    // Response messages\n    const [sucMsg, setSucMsg] = useState(false);\n    const [deckValid, setDeckValid] = useState(true);\n    const [questionValid, setQuestionValid] = useState(true);\n    const [AnswerTextValid, setAnswerTextValid] = useState(true);\n    const [fileValid, setFileValid] = useState(true);\n\n    const onDeckChange = e => {\n        // Getting the value and converting to string as its original value is an array\n        const value = [...e.target.selectedOptions].map(opt => opt.value).join();\n        setDeck(value);\n        if(deck !== 'false') {\n            setDeckValid(true); \n        }\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if(deck === '' || deck === 'false') {\n            setDeckValid(false);\n        } else {\n            setDeckValid(true);\n        }\n        if(question.trim() === '') {\n            setQuestionValid(false);\n        } else {\n            setQuestionValid(true);\n        }\n        if(answerText.trim() === '') {\n            setAnswerTextValid(false);\n        } else {\n            setAnswerTextValid(true);\n        }\n        if(deckValid && deck !== 'false' && deck !== '' && questionValid && question.trim() !== '' && AnswerTextValid && answerText.trim() !== '' && fileValid) {\n            let card = new FormData();\n            card.append('answerText', answerText)\n            card.append('question', question)\n            card.append('deck', deck)\n            card.append('status', 'easy')\n            card.append('file', file)\n            addCard(card);\n            setSucMsg(true)\n        }\n    }\n\n    if(decks !== null && decks.length === 0 && !loaded) {\n        return (\n            <div className='margins formHeading pt-110' style={{\n                height: '70vh'\n            }}>\n                <h3>You must create a deck before adding cards!</h3>\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            {decks !== null ? (\n                <form className='margins' onSubmit={handleSubmit}>\n                <h1 className='formHeading pt-110'>Add Card</h1>\n                <select name='decks' onChange={onDeckChange} value={deck}>\n                    <option value='false'>SELECT A DECK</option>\n                    {decks.map(deck => (\n                        <option value={deck._id}>{deck.title}</option>\n                    ))}\n                </select>\n\n                {!deckValid &&  <p className='errorMsg red'>Invalid deck.</p>}\n\n                <Input \n                    type='text' \n                    placeholder='FRONT OF CARD(QUESTION)' \n                    value={question} \n                    onChange={e => {\n                        setQuestion(e.target.value);\n                        setSucMsg(false);\n                        setQuestionValid(true)\n                    }} />\n\n                {!questionValid &&  <p className='errorMsg red'>A question is required.</p>}\n                \n                <Input \n                    type='text' \n                    placeholder='BACK OF CARD(ANSWER)' \n                    value={answerText} \n                    onChange={e => {\n                        setAnswerText(e.target.value)\n                        setSucMsg(false);   \n                        setAnswerTextValid(true); \n                        }} />\n\n                {!AnswerTextValid &&  <p className='errorMsg red'>A text answer is required.</p>}\n                \n                <Input \n                    type={type} \n                    placeholder='ADD AUDIO OR IMAGE TO ANSWER' \n                    focus={() => setType('file')} \n                    onChange={e => {\n                        setFile(e.target.files[0])\n                        setSucMsg(false);\n                        if((/\\.(jpe?g|png|m4a|mp4|mp3)$/i).test(e.target.value)) {\n                            setFileValid(true)\n                        } else {\n                            setFileValid(false)\n                        } \n                     }} />\n\n                    {!fileValid && \n                        <p className='errorMsg red'>File is invalid. Please upload jpeg, jpg png for an image, or m4a, mp4, mp3 for audio.</p>\n                    }\n                \n                <Button \n                    type='submit' \n                    class={'green mt-50'} \n                    value='ADD CARD' \n                    width='100%' />\n\n                {sucMsg && <p className='sucMsg greenText'>Card was added!</p>}\n            </form>\n            ) : <Spinner />}\n        </div>\n    )\n}\n\nexport default AddCard;","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n    return (\n        <div className='card mt-30' style={{\n            maxWidth: `${props.width}`,\n            height: `${props.height}`}}>\n                {props.children}\n        </div>\n    )\n}\n\nexport default Card;","export default __webpack_public_path__ + \"static/media/flashcards.45f92eb7.jpeg\";","import React, { useContext, useEffect } from 'react';\nimport  { Link } from 'react-router-dom';\nimport windowSize from 'react-window-size';\nimport './Decks.css';\nimport Card from '../../SharedComponents/Card/Card';\nimport Placeholder from '../../Images/flashcards.jpeg';\nimport Modal from '../../SharedComponents/Modal/Modal';\nimport Spinner from '../../SharedComponents/Spinner/Spinner';\nimport AuthContext from '../../Context/Auth/authContext';\nimport DeckContext from '../../Context/Decks/deckContext';\nimport CardContext from '../../Context/Cards/cardContext';\n\nconst Decks = (props) => {\n\n    const authContext = useContext(AuthContext);\n    const deckContext = useContext(DeckContext);\n    const cardContext = useContext(CardContext);\n\n    // Extracting the contacts & the filtered state within the context\n    const { decks, getDecks, editDeck } = deckContext;\n    const { clearCards } = cardContext;\n    \n    // When the page renders\n    useEffect(() => {\n        // Call the load user function\n        authContext.loadUser();   \n        clearCards();\n        // Getting the decks associated with the user\n        getDecks();\n        //eslint-disable-next-line\n    }, [])\n\n    const modalRef = React.useRef();\n\n    // // If no decks exist\n    if(decks !== null && decks.length === 0) {\n        return (\n            <div className='margins formHeading pt-110' style={{\n                height: '70vh'\n            }}>\n                <h3>No decks yet. Please create some!</h3>\n            </div>\n        )\n    }\n    return (\n        <div className='margins'>\n            {decks && decks !== null && decks.length > 0 ? (\n                <React.Fragment>\n                    <Modal ref={modalRef} title={'Deck'} text={'deck'}/>\n                    <h1 className='formHeading pt-110'>Your Decks</h1>\n                    <div className='decks'>                       \n                        {decks.map(deck => (\n                            <Card width={props.windowWidth < 1100 ? '100%' : '43%'} height='auto' key={deck._id}> \n                                {deck.file === 'null' || !deck.file ? (\n                                    <img src={Placeholder} alt='deck' />\n                                    ) : (\n                                        <img src={process.env.REACT_APP_FILE_URL + `${deck.file}`} alt='deck' />\n                                    )\n                                }\n                                <h2>{deck.title}</h2>\n                                <p>{deck.description}</p>\n                                <div className='controls'> \n                                    <Link to={`/cards/${deck._id}`}><p className='greenText'>REVISE</p></Link>\n                                    <p>\n                                        <Link to={`/editdeck/${deck._id}`} className=\"blue\">EDIT DECK</Link>\n                                    </p>\n                                    <p>\n                                        <Link \n                                            className='blue' \n                                            to={`/viewcards/${deck._id}`}>\n                                                VIEW CARDS\n                                        </Link>\n                                    </p>\n                                    <p onClick={() => {\n                                        modalRef.current.openModal();\n                                        editDeck(deck);\n                                    }} className=\"red\">DELETE DECK</p>\n                                </div> \n                            </Card>\n                        ))}\n                    </div> \n                </React.Fragment> \n            ) : <Spinner /> }\n        </div>\n    )  \n}\nexport default windowSize(Decks);\n/*\nDefault thumbnail src:\nhttps://www.pexels.com/photo/stacks-of-blank-white-visiting-cards-on-table-4466176/\n*/","import React from 'react';\n\nconst FilePreview = (props) => {\n    return (\n        <form className='imagePrevForm'>\n            <label htmlFor='imgPreview' className='d-block'>Current {props.label}:</label>\n            {/* If the file is an image */}\n            {props.type === 'image' ? (\n                <img src={props.file} className='imagePrev' alt='current file' />\n            ) : (\n                /* If the file is an image */\n                <audio controls className='audioPrev'>\n                    <source src={props.file} />\n                </audio>\n            )}\n\n            <div className='removeContainer' onClick={props.onClick}>\n                <i className='fa fa-trash red binIcon'></i>\n                <p className='red removeText'>Remove {props.label}</p>\n            </div>\n\n        </form>\n    )\n} \n\nexport default FilePreview;","import React, { useState, useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport Input from '../../SharedComponents/FormElements/Input';\nimport FilePreview from '../../SharedComponents/FormElements/FilePreview';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport Spinner from '../../SharedComponents/Spinner/Spinner';\nimport '../../SharedComponents/FormElements/FormElements.css';\nimport AuthContext from '../../Context/Auth/authContext';\nimport DeckContext from '../../Context/Decks/deckContext';\n\nconst EditDeck = (props) => {\n\n    let id = props.match.params.id;\n\n    const authContext = useContext(AuthContext)\n    const deckContext = useContext(DeckContext)\n\n    // Extracting functions from the context\n    const { updateDeck, deleteThumbnail } = deckContext;\n\n    const [deck, setDeck] = useState({\n        title: '',\n        description: '',\n        file: ''\n    });\n\n    const [loaded, setLoaded] = useState(false);\n\n    const [file, setFile] = useState('')\n    const [type, setType] = useState('text');\n\n    const [filePrev, setFilePrev] = useState(false); \n\n    // Validators\n    const [titleValid, setTitleValid] = useState(true);\n    const [desValid, setDesValid] = useState(true);\n    const [fileValid, setFileValid] = useState(true);\n\n    // When the page renders\n    useEffect(() => {\n        // Call the load user function\n        authContext.loadUser();\n\n        const getDeck = async () => {\n            try {\n                const res = await axios.get(process.env.REACT_APP_API_URL + `decks/${id}`);\n                setDeck({\n                    title: res.data[0].title,\n                    description: res.data[0].description,\n                    file: res.data[0].file\n                })\n                setLoaded(true);\n            } catch (err) {\n                console.log(err.response)\n            }\n        }\n\n        getDeck();\n        \n        //eslint-disable-next-line\n    }, [])\n\n    console.log(deck);\n\n    const inputHandler = e => setDeck({ ...deck, [e.target.name]: e.target.value });\n    \n    const deleteFileHandler = () => {\n        console.log('removed');\n        deleteThumbnail(id)\n        setFilePrev(true);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if(titleValid && deck.title.trim() !== '' && desValid && deck.description.trim() !== '' && fileValid) {\n            let deckData = new FormData();\n            deckData.append('title', deck.title)\n            deckData.append('description', deck.description)\n            deckData.append('file', file)\n\n            updateDeck(id, deckData);\n            props.history.push('/decks');\n        }\n    }\n\n    return (\n        <div className='margins'>\n            {loaded ? ( \n                <form onSubmit={handleSubmit}>\n                    <h1 className='formHeading pt-110'>Edit Deck</h1>\n                    <Input \n                        type='text' \n                        placeholder='ENTER DECK TITLE'                     \n                        name='title' \n                        value={deck.title}\n                        onChange={e => {\n                            inputHandler(e);\n                            if(e.target.value !== '') {\n                                setTitleValid(true);\n                            } else {\n                                setTitleValid(false);\n                            }\n                            }} />\n\n                    {!titleValid && \n                        <p className='errorMsg red'>Title is required</p>\n                    }\n                    \n                    <Input \n                        type='text' \n                        placeholder='ENTER DECK DESCRIPTION'                     \n                        name='description' \n                        value={deck.description}\n                        onChange={e => {\n                            inputHandler(e);\n                            if(e.target.value !== '') {\n                                setDesValid(true);\n                            } else {\n                                setDesValid(false);\n                            }\n                            }} />\n                    \n                    {!desValid && \n                        <p className='errorMsg red'>Description is required</p>\n                    }\n                    \n                    {deck.file !== 'null' && deck.file && !filePrev && (\n                        <FilePreview \n                            label='Thumbnail' \n                            file={`http://localhost:5000/${deck.file}`} \n                            type='image' \n                            onClick={deleteFileHandler} />\n                    )}\n\n                    <Input \n                        type={type} \n                        placeholder='UPLOAD DECK THUMBNAIL' \n                        name='thumbnail'\n                        focus={() => setType('file')} \n                        onChange={e => {setFile(e.target.files[0])\n                            if((/\\.(jpe?g|png)$/i).test(e.target.value)) {\n                                setFileValid(true)\n                            } else {\n                                setFileValid(false)\n                            }\n                        }} />\n\n                        {!fileValid && \n                            <p className='errorMsg red'>File is invalid. Please upload jpeg, jpg or png</p>\n                        }\n                    \n                    <Button type='submit' class={'green mt-50'} value='EDIT DECK' width='100%' />\n                    <Link to='/decks' className='link underline red'>Cancel</Link>\n                </form>\n            ) : (\n                <Spinner />\n            )}\n        </div>\n    )\n}\n\nexport default EditDeck;","import React, { useEffect, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport windowSize from 'react-window-size';\nimport '../Decks/Decks.css';\nimport Card from '../../SharedComponents/Card/Card';\nimport Placeholder from '../../Images/flashcards.jpeg';\nimport Modal from '../../SharedComponents/Modal/Modal';\nimport Spinner from '../../SharedComponents/Spinner/Spinner';\nimport AuthContext from '../../Context/Auth/authContext';\nimport CardContext from '../../Context/Cards/cardContext';\n\nconst ViewCards = (props) => {\n\n    const id = props.match.params.id;\n\n    const authContext = useContext(AuthContext)\n    const cardContext = useContext(CardContext)\n\n    const { getCards, cards, editCard, loaded } = cardContext;\n\n    // When the page renders\n    useEffect(() => {\n        // Call the load user function\n        authContext.loadUser();\n        getCards(id)\n\n        //eslint-disable-next-line\n    }, [])\n\n    const modalRef = React.useRef();\n\n    // If no decks exist\n    if(cards.length === 0 && loaded) {\n        return (\n            <div className='margins formHeading pt-110' style={{\n                height: '70vh'\n            }}>\n                <h3>No cards yet. Please create some!</h3>\n            </div>\n        )\n    }\n    return (\n        <div className='margins'>\n            {cards !== null && loaded ? (\n                <React.Fragment>\n                    <Modal ref={modalRef} title={'Card'} text={'card'}/>\n                    <h1 className='formHeading pt-110'>Your Cards</h1>\n                    <div className='decks'>\n                        {cards.map(card => (\n                            <Card width={props.windowWidth < 1100 ? '100%' : '43%'} height='auto' key={card._id}>      \n                                {card.file && card.file !== 'null' && card.file.includes('image') ? \n                                (\n                                    <img src={process.env.REACT_APP_FILE_URL + `${card.file}`} alt='Card file' />\n                                ) : (\n                                    <img src={Placeholder} alt='deck' /> \n                                )}\n                                <h2>{card.title}</h2>\n                                <p>{card.question}</p>\n                                <div className='controls'>\n                                    <Link to={`/editcard/${card._id}`}><p className=\"blue no-underline ffStyles\">EDIT CARD</p></Link>\n                                    <p onClick={() => {\n                                        modalRef.current.openModal();\n                                        editCard(card);\n                                    }}  className=\"red ffStyles\">DELETE CARD</p>\n                                </div>\n                            </Card>\n                        ))}\n                    </div>\n                </React.Fragment>\n            ) : (<Spinner />)}\n        </div>\n    );   \n}\n\nexport default windowSize(ViewCards);","import React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport Input from '../../SharedComponents/FormElements/Input';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport Spinner from '../../SharedComponents/Spinner/Spinner';\nimport FilePreview from '../../SharedComponents/FormElements/FilePreview';\nimport '../../SharedComponents/FormElements/FormElements.css';\nimport AuthContext from '../../Context/Auth/authContext';\nimport CardContext from '../../Context/Cards/cardContext';\nimport DeckContext from '../../Context/Decks/deckContext';\n\nconst EditCard = (props) => {\n\n    let id = props.match.params.id;\n\n    const authContext = useContext(AuthContext);\n    const deckContext = useContext(DeckContext);\n    const cardContext = useContext(CardContext);\n\n    // Extracting functions from the context\n    const { loadUser } = authContext;\n    const { getCards, updateCard, deleteFile } = cardContext;\n    const { getDecks, decks } = deckContext;\n\n    const [card, setCard] = useState({\n        deck: '',\n        question: '',\n        answerText: '',\n        file: '',\n    });\n\n    // Loading state\n    const [loaded, setLoaded] = useState(false);\n\n    // Setting file from within the card throws an error as the path has not yet been create, thus the includes function cannot function\n    const [file, setFile] = useState('');\n    const [filePrev, setFilePrev] = useState(false); \n\n    // Response messages\n    const [deckValid, setDeckValid] = useState(true);\n    const [questionValid, setQuestionValid] = useState(true);\n    const [AnswerTextValid, setAnswerTextValid] = useState(true);\n    const [fileValid, setFileValid] = useState(true);\n    \n    const [type, setType] = useState('text');\n\n    // When the page renders\n    useEffect(() => {\n        // Call the load user function\n        loadUser();\n        getDecks();\n        const getCard = async () => {\n            const res = await axios.get(process.env.REACT_APP_API_URL + `cards/card/${id}`);\n            setCard({\n                question: res.data.question,\n                answerText: res.data.answerText,\n                file: res.data.file,\n                deck: res.data.deck\n            });\n            setLoaded(true);\n        }\n        getCard();\n\n     // eslint-disable-next-line\n    }, [])\n\n    const onDeckChange = e => {\n        // Getting the value and converting to string as its original value is an array\n        const value = [...e.target.selectedOptions].map(opt => opt.value).join();\n        setCard({\n            ...card,\n            deck: value\n        });\n        setDeckValid(true); \n    }\n\n    const deleteFileHandler = () => {\n        console.log('removed');\n        deleteFile(id)\n        setFilePrev(true);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        if(card.deck === '' || card.deck === 'false') {\n            setDeckValid(false);\n            console.log(false)\n        } else {\n            setDeckValid(true);\n        }\n\n        if(deckValid && card.deck !== 'false' && questionValid && AnswerTextValid && fileValid) {\n            let cardData = new FormData();\n            cardData.append('answerText', card.answerText)\n            cardData.append('question', card.question)\n            cardData.append('deck', card.deck)\n            cardData.append('file', file)\n            updateCard(id, cardData);\n            getCards(card.deck)\n            props.history.push(`/viewcards/${card.deck}`);\n        }\n    }\n\n    return (\n        <div>\n            {loaded ? (\n                <form className='margins' onSubmit={handleSubmit}>\n                    <h1 className='formHeading pt-110'>Edit Card</h1>\n                    <select name='decks' onChange={onDeckChange} value={card.deck}>\n                        <option value='false'>SELECT A DECK</option>\n                        {decks.map(deck => (\n                            <option value={deck._id}>{deck.title}</option>\n                        ))}\n                    </select>\n\n                    {!deckValid &&  <p className='errorMsg red'>Invalid deck.</p>}\n\n                    <Input \n                        type='text' \n                        placeholder='FRONT OF CARD(QUESTION)' \n                        value={card.question}\n                        name='question'\n                        onChange={e => {\n                            setCard({\n                                ...card,\n                                question: e.target.value\n                            })\n                            if(e.target.value !== '') {\n                                setQuestionValid(true);\n                            } else {\n                                setQuestionValid(false); \n                            }\n                        }} />\n                    \n                    {!questionValid && <p className='errorMsg red'>A question is required.</p>}\n\n                    <Input \n                        type='text' \n                        placeholder='BACK OF CARD(ANSWER)' \n                        value={card.answerText} \n                        name='answerText'\n                        onChange={e => {\n                            setCard({\n                                ...card,\n                                answerText: e.target.value\n                            })\n                            if(e.target.value !== '') {\n                                setAnswerTextValid(true);\n                            } else {\n                                setAnswerTextValid(false); \n                            }\n                        }} />\n\n                    {!AnswerTextValid  && <p className='errorMsg red'>An answer in text is required.</p>}\n\n                    {card.file && card.file !== '' && card.file !== 'null' && !filePrev && (\n                        <FilePreview \n                            label='File' \n                            file={process.env.REACT_APP_FILE_URL + `${card.file}`} \n                            type={card.file.includes('audio') ? 'audio' : 'image'}\n                            onClick={deleteFileHandler} />\n                    )}\n\n                    <Input \n                        type={type} \n                        placeholder='ADD AUDIO OR IMAGE TO ANSWER' \n                        focus={() => setType('file')}\n                        onChange={e => {setFile(e.target.files[0])\n                            if((/\\.(jpe?g|png|m4a|mp3|mp4)$/i).test(e.target.value)) {\n                                setFileValid(true)\n                            } else {\n                                setFileValid(false)\n                            }\n                        }} />\n\n                    {!fileValid && \n                        <p className='errorMsg red'>File is invalid. Please upload jpeg, jpg png for an image, or m4a, mp4, mp3 for audio.</p>\n                    }\n\n                    <Button type='submit' class={'green mt-50'} value='EDIT CARD' width='100%' />\n                </form>\n            ) : (\n                <Spinner />\n            )}\n        </div>\n    )\n}\n\nexport default EditCard;","import React, { useState, useEffect, useContext } from 'react';\nimport windowSize from 'react-window-size';\nimport ReactCardFlip from 'react-card-flip';\nimport './ReviseCards.css';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport Card from '../../SharedComponents/Card/Card';\nimport Spinner from '../../SharedComponents/Spinner/Spinner';\nimport AuthContext from '../../Context/Auth/authContext';\nimport CardContext from '../../Context/Cards/cardContext';\n\nconst Cards = (props) => {\n\n    const id = props.match.params.id;\n\n    const authContext = useContext(AuthContext)\n    const cardContext = useContext(CardContext)\n\n    const { \n        loaded, \n        cards, \n        getCards,\n        reviseCards, \n        updateStatus, \n        studyCard, \n        clearStudyCard } = cardContext;\n\n    // When the page renders\n    useEffect(() => {\n        // Call the load user function\n        authContext.loadUser();\n        // Clearing current study card within state\n        clearStudyCard();\n        // Getting the cards within this deck\n        getCards(id)\n        // Getting a card to revise from the specified deck\n        reviseCards(id)\n        // eslint-disable-next-line\n    }, [])\n\n    // For flipping the card\n    const [isFlipped, setIsFlipped] = useState(false);\n\n    const onClickHandler = (id, status) => {\n        // Updating status of card\n        const card = { \n            ...studyCard,\n            status: status\n        }\n        // Calling function which sends the put request\n        updateStatus(card)\n        // Clearing the current study card within the state\n        clearStudyCard();\n        // Flipping the card\n        setIsFlipped(!isFlipped)\n        // Timeout is required to ensure the cards are up to date\n        setTimeout(() => {\n            // Getting the new study card\n            reviseCards(id);\n            // Delaying by 0.05 seconds\n        }, 50)\n    }\n\n    // Checking whether any cards are available\n    if(cards.length === 0 && loaded) {\n        return (\n            <div className='margins formHeading pt-110' style={{\n                height: '70vh'\n            }}>\n                {/* If no cards exist, display the following message */}\n                <h3>No cards to revise. Please create some!</h3>\n            </div>\n        )\n    }\n    return (\n        <div className='margins'>\n            {/* If study card is not null and loaded is true */}\n            {studyCard !== null && loaded ? (\n                <React.Fragment>\n                    <h1 className='formHeading pt-110'>Revise</h1>\n                    <ReactCardFlip isFlipped={isFlipped} flipDirection=\"vertical\">\n                        <Card width={'100%'} height={props.windowWidth < 768 ? '500px' : '425px'}>\n                            <h2>Question:</h2>\n                            <p>{studyCard.question}</p>\n                            <div className='btn-front'>\n                                <Button \n                                    type='button' \n                                    class={'green'}\n                                    value='TURN CARD' \n                                    width={props.windowWidth < 1100 ? '100%' : '100%'} \n                                    click={() => setIsFlipped(!isFlipped)}\n                                />\n                            </div>\n                        </Card>\n                        <Card width={'100%'} height={props.windowWidth < 768 ? '500px' : '425px'}>\n                            <h2>Answer:</h2>\n                            <p>{studyCard.answerText}</p> \n                            <div className='fileContainer'>\n                                {/*If file is audio  */}\n                                {studyCard.file && studyCard.file !== 'null' && studyCard.file.includes('audio') &&  (\n                                    <audio controls className='audio'>\n                                        <source src={process.env.REACT_APP_FILE_URL + `${studyCard.file}`} />\n                                    </audio>\n                                )}\n                                {/*If file is an image  */}\n                                {studyCard.file && studyCard.file !== 'null' && studyCard.file.includes('image') &&  (\n                                    <img src={process.env.REACT_APP_FILE_URL + `${studyCard.file}`} alt='bread' className='cardImg' /> \n                                )}\n                            </div>\n                            <div className='feedback bottom'>\n                                <Button \n                                    type='submit' \n                                    class={'green mt-30'} \n                                    value='EASY' \n                                    name='easy'\n                                    width={props.windowWidth < 1100 ? '100%' : '33%'}\n                                    click={() => onClickHandler(studyCard.deck, 'easy')} />\n                                <Button \n                                    type='submit' \n                                    class={'medium mt-30'} \n                                    value='MEDIUM'\n                                    name='medium' \n                                    width={props.windowWidth < 1100 ? '100%' : '33%'}\n                                    click={() => onClickHandler(studyCard.deck, 'medium')} />\n                                <Button \n                                    type='submit' \n                                    class={'hard mt-30'} \n                                    value='HARD' \n                                    name='hard'\n                                    width={props.windowWidth < 1100 ? '100%' : '33%'}\n                                    click={() => onClickHandler(studyCard.deck, 'hard')} />\n                            </div>\n                        </Card>\n                    </ReactCardFlip>\n                </React.Fragment>\n            ) : (\n                <Spinner />\n            )}\n            </div>\n        );\n}\n\nexport default windowSize(Cards);","import React, { useContext, useEffect } from 'react';\nimport AuthContext from '../../Context/Auth/authContext';\nimport Input from '../../SharedComponents/FormElements/Input';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport '../../SharedComponents/FormElements/FormElements.css';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nconst ForgotPassword = (props) => {\n    // Initialise auth context\n    const authContext = useContext(AuthContext)\n    // Retrieving the set regitser function from the auth context\n    const { isAuthenticated, forgotPassword, clearRes, forgotPwdRes } = authContext;\n\n    useEffect(() => {\n        // If the user is authenticated, redirect to the home page\n        if(isAuthenticated) {\n            props.history.push('/decks');\n        }\n        \n        // eslint-disable-next-line\n        // ^^  DISCUSS THIS AS AN ERROR IN HONOURS PROJECT\n    }, [isAuthenticated, props.history]);\n\n    return (\n        <div className='margins' style={{\n            height: '90vh'\n        }}>\n            <h1 className='formHeading pt-110'>Forgot Password</h1>\n            <Formik\n                initialValues={{\n                    email: ''\n                }}\n                validationSchema={\n                    Yup.object().shape({\n                        email: Yup.string()\n                            .email('Email is invalid')\n                            .required('Email is required')\n                        })\n                    }\n                    onSubmit={ (values) => {\n                        forgotPassword(values)\n                        setTimeout(() => {\n                            clearRes();\n                        }, 5000)\n                    }}>\n                {({  handleChange, values, errors, touched }) => (        \n                    <Form>\n                        <Input \n                            type='text' \n                            placeholder='ENTER EMAIL' \n                            name='email'\n                            onChange={handleChange}\n                            values={values.email} />\n                        <p className='errorMsg red'>{errors.email && touched.email ? errors.email : null}</p>\n\n                        <Button type='submit' class={'green mt-50'} value='SUBMIT' width='100%' />\n                        {forgotPwdRes && (\n                            <p className={forgotPwdRes === 'The provided email address is not registered with omnilingu' ? 'errorMsg red' : 'sucMsg greenText'}>{forgotPwdRes}</p>    \n                        )}\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    )\n}\n\nexport default ForgotPassword;","import React, { useContext, useEffect } from 'react';\nimport AuthContext from '../../Context/Auth/authContext';\nimport Input from '../../SharedComponents/FormElements/Input';\nimport Button from '../../SharedComponents/FormElements/Button';\nimport '../../SharedComponents/FormElements/FormElements.css';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\n\nconst ResetPassword = (props) => {\n    \n    // Initialise auth context\n    const authContext = useContext(AuthContext)\n    // Retrieving the set regitser function from the auth context\n    const { isAuthenticated, resetPassword, resetPwdRes, clearRes } = authContext;\n\n    const expireParam = props.match.params.time;\n    const expiresIn = parseInt(expireParam) ;\n    const email = props.match.params.email;\n    const resetId = props.match.params.id;\n    const currentTime = Date.now();\n\n    useEffect((props) => {\n        // If the user is authenticated, redirect to the home page\n        if(isAuthenticated) {\n            props.history.push('/decks');\n        }\n\n        if(expiresIn.length <= 10 || resetId.length <= 10) {\n            props.history.push('/');\n        } \n\n        clearRes();\n    \n        // ^^  DISCUSS THIS AS AN ERROR IN HONOURS PROJECT - DISCUSS ES LINT DISABLE\n    }, [isAuthenticated, props.history, expiresIn.length, resetId.length]);\n\n    return (\n        <div className='margins'>\n            {currentTime > expiresIn ? (\n                <div style={{\n                    height: '90vh'\n                }}>\n                    <h1 className='formHeading pt-110'>This link has expired</h1>\n                    <p>Links are only active for 30 minutes, if you still need assistance in reseting your password, request another link.</p>\n                </div>\n            ) : (\n                <React.Fragment>\n                    <h1 className='formHeading pt-110'>Reset Password</h1>\n                    <Formik\n                        initialValues={{\n                            password: '',\n                            confirmPassword: ''\n                        }}\n                        validationSchema={\n                            Yup.object().shape({\n                                password: Yup.string()\n                                    .min(6)\n                                    .max(15)\n                                    .required('Password is required'),\n                                confirmPassword: Yup.string()\n                                    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n                                    .required('You must confirm your password'),\n                            })\n                        }\n                        onSubmit={ (values) => {\n                            const { password } = values;\n                            resetPassword({\n                                email,\n                                password,\n                                resetId\n                            })\n                        }}>\n                        {({  handleChange, values, errors, touched }) => (        \n                            <Form>\n                                <Input\n                                    type='password' \n                                    placeholder='ENTER NEW PASSWORD' \n                                    name='password'\n                                    onChange={handleChange}\n                                    values={values.password} />\n                                <p className='errorMsg red'>{errors.password && touched.password ? errors.password : null}</p>\n\n                                <Input\n                                    type='password' \n                                    placeholder='CONFIRM NEW PASSWORD' \n                                    name='confirmPassword'\n                                    onChange={handleChange}\n                                    values={values.pasconfirmPassword} />\n                                <p className='errorMsg red'>{errors.confirmPassword && touched.confirmPassword ? errors.confirmPassword : null}</p>\n                                \n                                <Button type='submit' class={'green mt-50'} value='RESET PASSWORD' width='100%' />\n                                {resetPwdRes && resetPwdRes === 'Your password was successfully updated.' ? (\n                                    <p className='sucMsg greenText'>{resetPwdRes}</p>\n                                ) : (\n                                    <p className='errorMsg red d-block w-100'>{resetPwdRes}</p>\n                                )}\n                            </Form>\n                        )}\n                    </Formik>\n                </React.Fragment>\n            )}\n        </div>\n    )\n}\n\nexport default ResetPassword;","import React from 'react';\n\nconst Gdpr = () => {\n    return(\n        <div className='margins text-left'>\n            <h1 className='formHeading pt-110'>GDPR Privacy Policy for Omnilingu</h1>\n            <p className='text-left'>At Omnilingu, accessible at Omnilingu.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by Omnilingu and how we use it.</p>\n            <p className='text-left'>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us through email at artexp@gmail.com</p>\n            <h3 className='pb-10'>General Data Protection Regulation (GDPR)</h3>\n            <p className='text-left'>We are a Data Controller of your information.</p>\n            <p className='text-left'>Omnilingu legal basis for collecting and using the personal information described in this Privacy Policy depends on the Personal Information we collect and the specific context in which we collect the information:</p>\n            <p className='text-left'>- Omnilingu needs to perform a contract with you</p>\n            <p className='text-left'>- You have given Omnilingu permission to do so</p>\n            <p className='text-left'>- Processing your personal information is in Omnilingu's legitimate interests</p>\n            <p className='text-left'>- Omnilingu needs to comply with the law</p>\n            <br/>\n            <p className='text-left'>Omnilingu will retain your personal information only for as long as is necessary for the purposes set out in this Privacy Policy. We will retain and use your information to the extent necessary to comply with our legal obligations, resolve disputes, and enforce our policies.</p>\n            <p className='text-left'>If you are a resident of the European Economic Area (EEA), you have certain data protection rights. If you wish to be informed what Personal Information we hold about you and if you want it to be removed from our systems, please contact us.</p>\n            <p className='text-left'>In certain circumstances, you have the following data protection rights:</p>\n            <p className='text-left'>- The right to access, update or to delete the information we have on you.</p> \n            <p className='text-left'>- The right of rectification.</p>\n            <p className='text-left'>- The right to object.</p>\n            <p className='text-left'>- The right of restriction.</p>\n            <p className='text-left'>- The right to data portability</p>\n            <p className='text-left'>- The right to withdraw consent</p>\n            <br/>\n            <h3 className='pb-10'>Log Files</h3>\n            <p className='text-left'>Omnilingu follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n            <br/>\n            <h3 className='pb-10'>Children's Information</h3>\n            <p className='text-left'>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n            <p className='text-left'>Omnilingu does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>\n            <h3 className='pb-10'>Online Privacy Policy Only</h3>\n            <p className='text-left'>This privacy policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in Omnilingu. This policy is not applicable to any information collected offline or via channels other than this website.</p>\n            <h3 className='pb-10'>Consent</h3>\n            <p className='text-left'>By using the site, you hereby consent to our Privacy Policy and agree to its Terms and Conditions</p>\n        </div>\n    )\n}\n\nexport default Gdpr;","import './App.css';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\nimport ProtectedRoute from './Routes/ProtectedRoute';\nimport ToAuthRoute from './Routes/ToAuthRoute';\nimport AuthState from './Context/Auth/AuthState';\nimport DeckState from './Context/Decks/DeckState';\nimport CardState from './Context/Cards/CardState';\nimport setAuthToken from './Utils/setAuthToken';\nimport Navigation from './Layout/Navigation/Navigation';\nimport Footer from './Layout/Footer/Footer';\nimport RegisterForm from './Pages/Forms/RegisterForm';\nimport LoginForm from './Pages/Forms/LoginForm';\nimport Landing from './Pages/Landing/Landing';\nimport AddDeck from './Pages/Forms/AddDeck';\nimport AddCard from './Pages/Forms/AddCard';\nimport Decks from './Pages/Decks/Decks';\nimport EditDeck from './Pages/Forms/EditDeck';\nimport ViewCards from './Pages/ViewCards/ViewCards';\nimport EditCard from './Pages/Forms/EditCard';\nimport ReviseCards from './Pages/ReviseCards/ReviseCards';\nimport ForgotPassword from './Pages/Forms/ForgotPassword';\nimport ResetPassword from './Pages/Forms/ResetPassword';\nimport Gdpr from './Pages/Gdpr/Gdpr';\n\nconst App = () => {\n// if a token exists in local storage\nif(localStorage.token) {\n  setAuthToken(localStorage.token);\n}\n  return (\n    <AuthState>\n      <DeckState>\n        <CardState>\n          <Router>\n            <div className=\"App\">\n              <Navigation />\n              <main>\n                <Switch>\n                  <ToAuthRoute path=\"/home\" exact component={Landing} />\n                  <Route path=\"/gdpr\" exact component={Gdpr} />\n                  <ToAuthRoute path=\"/login\" exact component={LoginForm} />\n                  <ToAuthRoute path=\"/register\" exact component={RegisterForm} />\n                  <Route path=\"/forgot\" exact component={ForgotPassword} />\n                  <Route path=\"/reset/:time/:email/:id\" exact component={ResetPassword} />\n                  <ProtectedRoute path=\"/adddeck\" exact component={AddDeck} />\n                  <ProtectedRoute path=\"/addcard\" exact component={AddCard} />\n                  <ProtectedRoute path=\"/decks\" exact component={Decks} />\n                  <ProtectedRoute path=\"/editdeck/:id\" exact component={EditDeck} />\n                  <ProtectedRoute path=\"/viewcards/:id\" exact component={ViewCards} />\n                  <ProtectedRoute path=\"/editcard/:id\" exact component={EditCard} />\n                  <ProtectedRoute path=\"/cards/:id\" exact component={ReviseCards} />\n                  <Redirect to=\"/home\" />\n                </Switch>\n              </main>\n              <Footer />\n            </div>\n          </Router>\n        </CardState>\n      </DeckState>\n    </AuthState>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}